// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package generated

import (
	"fmt"
	"net/http"

	"github.com/go-chi/chi/v5"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// CountResponse defines model for CountResponse.
type CountResponse struct {
	// Count Результат подсчета
	Count *int `json:"count,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// NewReceipt defines model for NewReceipt.
type NewReceipt struct {
	// BalanceAccount Балансовый счет
	BalanceAccount string `json:"balanceAccount"`

	// DocTypeId Код типа сопроводительного документа
	DocTypeId int `json:"docTypeId"`

	// DocumentNumber Номер сопроводительного документа
	DocumentNumber string `json:"documentNumber"`

	// MaterialAccount Счет материала
	MaterialAccount string `json:"materialAccount"`

	// MaterialId Код материала
	MaterialId int64 `json:"materialId"`

	// OrderNumber Номер ордера
	OrderNumber string `json:"orderNumber"`

	// Quantity Количество пришедшего материала
	Quantity float32 `json:"quantity"`

	// ReceiptDate Дата поступления
	ReceiptDate openapi_types.Date `json:"receiptDate"`

	// SupplierId Код поставщика
	SupplierId int64 `json:"supplierId"`

	// UnitId Код единицы измерения
	UnitId int `json:"unitId"`

	// UnitPrice Цена за единицу измерения
	UnitPrice float32 `json:"unitPrice"`
}

// Receipt defines model for Receipt.
type Receipt struct {
	// BalanceAccount Балансовый счет
	BalanceAccount string `json:"balanceAccount"`

	// DocTypeId Код типа сопроводительного документа
	DocTypeId int `json:"docTypeId"`

	// DocumentNumber Номер сопроводительного документа
	DocumentNumber string `json:"documentNumber"`

	// MaterialAccount Счет материала
	MaterialAccount string `json:"materialAccount"`

	// MaterialId Код материала
	MaterialId int64 `json:"materialId"`

	// OrderNumber Номер ордера
	OrderNumber string `json:"orderNumber"`

	// Quantity Количество пришедшего материала
	Quantity float32 `json:"quantity"`

	// ReceiptDate Дата поступления
	ReceiptDate openapi_types.Date `json:"receiptDate"`

	// ReceiptId Уникальный ID записи (присваивается сервером)
	ReceiptId *int64 `json:"receiptId,omitempty"`

	// SupplierId Код поставщика
	SupplierId int64 `json:"supplierId"`

	// UnitId Код единицы измерения
	UnitId int `json:"unitId"`

	// UnitPrice Цена за единицу измерения
	UnitPrice float32 `json:"unitPrice"`
}

// Supplier defines model for Supplier.
type Supplier struct {
	BankAccount       *string `json:"bankAccount,omitempty"`
	BankCity          *string `json:"bankCity,omitempty"`
	BankStreetAddress *string `json:"bankStreetAddress,omitempty"`
	BankZipCode       *string `json:"bankZipCode,omitempty"`

	// Inn ИНН
	Inn                *string `json:"inn,omitempty"`
	LegalCity          *string `json:"legalCity,omitempty"`
	LegalStreetAddress *string `json:"legalStreetAddress,omitempty"`
	LegalZipCode       *string `json:"legalZipCode,omitempty"`

	// Name Наименование поставщика
	Name       *string `json:"name,omitempty"`
	SupplierId *int64  `json:"supplierId,omitempty"`
}

// CountSuppliersParams defines parameters for CountSuppliers.
type CountSuppliersParams struct {
	// BankCity Город банка
	BankCity *string `form:"bankCity,omitempty" json:"bankCity,omitempty"`

	// BankStreetAddress Улица и дом банка
	BankStreetAddress *string `form:"bankStreetAddress,omitempty" json:"bankStreetAddress,omitempty"`

	// BankZipCode Индекс банка
	BankZipCode *string `form:"bankZipCode,omitempty" json:"bankZipCode,omitempty"`
}

// CreateReceiptJSONRequestBody defines body for CreateReceipt for application/json ContentType.
type CreateReceiptJSONRequestBody = NewReceipt

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Получить список поставщиков данного материала
	// (GET /materials/{materialId}/suppliers)
	GetSuppliersByMaterial(w http.ResponseWriter, r *http.Request, materialId int64)
	// Получить количество поставщиков данного материала
	// (GET /materials/{materialId}/suppliers/count)
	CountSuppliersByMaterial(w http.ResponseWriter, r *http.Request, materialId int64)
	// Добавление новой единицы хранения (приходного ордера)
	// (POST /receipts)
	CreateReceipt(w http.ResponseWriter, r *http.Request)
	// Посчитать количество поставщиков по фильтру (включая адрес банка)
	// (GET /suppliers/count)
	CountSuppliers(w http.ResponseWriter, r *http.Request, params CountSuppliersParams)
}

// Unimplemented server implementation that returns http.StatusNotImplemented for each endpoint.

type Unimplemented struct{}

// Получить список поставщиков данного материала
// (GET /materials/{materialId}/suppliers)
func (_ Unimplemented) GetSuppliersByMaterial(w http.ResponseWriter, r *http.Request, materialId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Получить количество поставщиков данного материала
// (GET /materials/{materialId}/suppliers/count)
func (_ Unimplemented) CountSuppliersByMaterial(w http.ResponseWriter, r *http.Request, materialId int64) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Добавление новой единицы хранения (приходного ордера)
// (POST /receipts)
func (_ Unimplemented) CreateReceipt(w http.ResponseWriter, r *http.Request) {
	w.WriteHeader(http.StatusNotImplemented)
}

// Посчитать количество поставщиков по фильтру (включая адрес банка)
// (GET /suppliers/count)
func (_ Unimplemented) CountSuppliers(w http.ResponseWriter, r *http.Request, params CountSuppliersParams) {
	w.WriteHeader(http.StatusNotImplemented)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetSuppliersByMaterial operation middleware
func (siw *ServerInterfaceWrapper) GetSuppliersByMaterial(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "materialId" -------------
	var materialId int64

	err = runtime.BindStyledParameterWithOptions("simple", "materialId", chi.URLParam(r, "materialId"), &materialId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "materialId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSuppliersByMaterial(w, r, materialId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CountSuppliersByMaterial operation middleware
func (siw *ServerInterfaceWrapper) CountSuppliersByMaterial(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "materialId" -------------
	var materialId int64

	err = runtime.BindStyledParameterWithOptions("simple", "materialId", chi.URLParam(r, "materialId"), &materialId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "materialId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CountSuppliersByMaterial(w, r, materialId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateReceipt operation middleware
func (siw *ServerInterfaceWrapper) CreateReceipt(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateReceipt(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CountSuppliers operation middleware
func (siw *ServerInterfaceWrapper) CountSuppliers(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params CountSuppliersParams

	// ------------- Optional query parameter "bankCity" -------------

	err = runtime.BindQueryParameter("form", true, false, "bankCity", r.URL.Query(), &params.BankCity)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bankCity", Err: err})
		return
	}

	// ------------- Optional query parameter "bankStreetAddress" -------------

	err = runtime.BindQueryParameter("form", true, false, "bankStreetAddress", r.URL.Query(), &params.BankStreetAddress)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bankStreetAddress", Err: err})
		return
	}

	// ------------- Optional query parameter "bankZipCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "bankZipCode", r.URL.Query(), &params.BankZipCode)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "bankZipCode", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CountSuppliers(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/materials/{materialId}/suppliers", wrapper.GetSuppliersByMaterial)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/materials/{materialId}/suppliers/count", wrapper.CountSuppliersByMaterial)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/receipts", wrapper.CreateReceipt)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/suppliers/count", wrapper.CountSuppliers)
	})

	return r
}
